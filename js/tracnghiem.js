import subjectsConfig from './subjects_config.js';

// Danh s√°ch lƒ©nh v·ª±c ch√≠nh v√† c√°c ch·ªß ƒë·ªÅ con
const mainTopics = subjectsConfig.map(subject => ({
    name: subject.title,
    subtitle: subject.subtitle,
    icon: subject.icon,
    subTopics: [
        { label: "Ph√°p lu·∫≠t chung", file: subject.files.law[0] },
        { label: "Ph√°p lu·∫≠t ri√™ng", file: subject.files.law[1] },
        { label: "Chuy√™n m√¥n", file: subject.files.specialized[0] }
    ]
}));

let questions = [];
let currentQuestion = null;
let selectedAnswer = null;
let selectedMainTopic = null;
let selectedSubTopics = [];
let stats = {
    total: 0,
    correct: 0,
    wrong: 0
};

let remainingQuestions = [];
let isAllQuestionsMode = false; // Bi·∫øn theo d√µi ch·∫ø ƒë·ªô hi·ªÉn th·ªã
let allQuestionsAnswers = {}; // L∆∞u tr·ªØ ƒë√°p √°n ƒë√£ ch·ªçn cho t·ª´ng c√¢u h·ªèi

const selectionSection = document.getElementById('selectionSection');
const loadingSection = document.getElementById('loadingSection');
const quizContainer = document.getElementById('quizContainer');
const questionText = document.getElementById('questionText');
const optionsContainer = document.getElementById('optionsContainer');
const submitBtn = document.getElementById('submitBtn');
const nextBtn = document.getElementById('nextBtn');
const result = document.getElementById('result');
const selectStyled = document.getElementById('selectStyled');
const selectOptions = document.getElementById('selectOptions');
const startButton = document.getElementById('startButton');
const backButton = document.getElementById('backButton');

// C√°c bi·∫øn cho ch·∫ø ƒë·ªô chuy·ªÉn ƒë·ªïi
const modeSwitchBtn = document.getElementById('modeSwitchBtn');
const singleQuestionMode = document.getElementById('singleQuestionMode');
const allQuestionsMode = document.getElementById('allQuestionsMode');
const allQuestionsList = document.getElementById('allQuestionsList');
const allQuestionsSearchInput = document.getElementById('allQuestionsSearchInput');
const showAllAnswersBtn = document.getElementById('showAllAnswersBtn');
let isShowAllAnswers = false;

const onlineExamBtn = document.getElementById('onlineExamBtn');
const statsDiv = document.querySelector('.stats');

// Kh·ªüi t·∫°o dropdown v√† events
window.addEventListener('load', initializeDropdown);
submitBtn.addEventListener('click', submitAnswer);
nextBtn.addEventListener('click', nextQuestion);
startButton.addEventListener('click', startQuiz);
backButton.addEventListener('click', backToSelection);
modeSwitchBtn.addEventListener('click', toggleDisplayMode);

// ƒê√≥ng dropdown khi click b√™n ngo√†i
document.addEventListener('click', function(e) {
    if (!e.target.closest('.custom-select')) {
        selectOptions.classList.remove('show');
        selectStyled.classList.remove('active');
    }
});

function initializeDropdown() {
    // T·∫°o options cho dropdown lƒ©nh v·ª±c ch√≠nh
    selectOptions.innerHTML = '';
    mainTopics.forEach((topic, index) => {
        const optionDiv = document.createElement('div');
        optionDiv.className = 'select-option';
        optionDiv.innerHTML = `
            <div style="display: flex; align-items: flex-start; gap: 12px;">
                <span class="option-icon" style="font-size: 2em; display: flex; align-items: flex-start; font-style: normal;">${topic.icon}</span>
                <div style="display: flex; flex-direction: column;">
                    <span style="font-weight: 600; color: #222; font-style: normal;">${topic.name}</span>
                    <span style="font-size: 0.98em; color: #888; font-style: normal;">${topic.subtitle}</span>
                </div>
            </div>
        `;
        optionDiv.addEventListener('click', () => selectMainTopic(topic, index));
        selectOptions.appendChild(optionDiv);
    });

    selectStyled.addEventListener('click', function() {
        selectOptions.classList.toggle('show');
        selectStyled.classList.toggle('active');
    });

    // Di chuy·ªÉn v√πng hi·ªÉn th·ªã checkbox subtopic l√™n tr√™n n√∫t b·∫Øt ƒë·∫ßu
    let checkboxDiv = document.getElementById('subTopicCheckboxes');
    if (!checkboxDiv) {
        checkboxDiv = document.createElement('div');
        checkboxDiv.id = 'subTopicCheckboxes';
        checkboxDiv.style = 'margin-top: 18px; display: none;';
        // Ch√®n v√†o ƒë√∫ng v·ªã tr√≠ tr∆∞·ªõc startButton
        const dropdownContainer = document.querySelector('.dropdown-container');
        dropdownContainer.insertBefore(checkboxDiv, startButton);
    }
}

function selectMainTopic(topic, index) {
    selectedMainTopic = topic;
    selectedSubTopics = [];
    // C·∫≠p nh·∫≠t hi·ªÉn th·ªã dropdown
    selectStyled.innerHTML = `
        <div style="display: flex; align-items: flex-start; gap: 12px;">
            <span class="option-icon" style="font-size: 2em; display: flex; align-items: flex-start; font-style: normal;">${topic.icon}</span>
            <div style="display: flex; flex-direction: column;">
                <span style="font-weight: 600; color: #222; font-style: normal;">${topic.name}</span>
                <span style="font-size: 0.98em; color: #888; font-style: normal;">${topic.subtitle}</span>
            </div>
        </div>
    `;
    selectOptions.classList.remove('show');
    selectStyled.classList.remove('active');
    // M√¥ t·∫£ ng·∫Øn cho t·ª´ng lo·∫°i
    const subDesc = [
        'C√°c quy ƒë·ªãnh chung v·ªÅ x√¢y d·ª±ng',
        'C√°c quy ƒë·ªãnh ri√™ng cho t·ª´ng lƒ©nh v·ª±c',
        'Ki·∫øn th·ª©c chuy√™n m√¥n nghi·ªáp v·ª•'
    ];
    // Hi·ªÉn th·ªã checkbox subtopic v·ªõi icon, tooltip, ripple
    const icons = ['üìö', '‚öñÔ∏è', 'üõ†Ô∏è'];
    const checkboxDiv = document.getElementById('subTopicCheckboxes');
    checkboxDiv.innerHTML = '<div style="font-weight:600; margin-bottom:8px;">Ch·ªçn lo·∫°i ch·ªß ƒë·ªÅ:</div>' +
        '<div class="subtopic-row">' +
        topic.subTopics.map((sub, i) => `
            <label>
                <input type="checkbox" class="subtopic-checkbox" value="${sub.file}" data-label="${sub.label}">
                <span class="topic-icon">${icons[i] || 'üìö'}</span>
                <span>${sub.label}</span>
                <span class="tooltip">${subDesc[i] || ''}</span>
            </label>
        `).join('') + '</div>';
    checkboxDiv.style.display = 'block';
    // L·∫Øng nghe s·ª± ki·ªán tick + hi·ªáu ·ª©ng ripple
    checkboxDiv.querySelectorAll('.subtopic-checkbox').forEach(cb => {
        cb.addEventListener('change', function(e) {
            const file = this.value;
            if (this.checked) {
                if (!selectedSubTopics.includes(file)) selectedSubTopics.push(file);
            } else {
                selectedSubTopics = selectedSubTopics.filter(f => f !== file);
            }
            // Enable n√∫t start n·∫øu c√≥ √≠t nh·∫•t 1 lo·∫°i ƒë∆∞·ª£c ch·ªçn
            if (selectedSubTopics.length > 0) {
                startButton.classList.add('enabled');
            } else {
                startButton.classList.remove('enabled');
            }
            // Hi·ªáu ·ª©ng ripple
            const label = this.parentElement;
            let ripple = document.createElement('span');
            ripple.className = 'ripple';
            ripple.style.left = (e.offsetX || 20) + 'px';
            ripple.style.top = (e.offsetY || 20) + 'px';
            label.appendChild(ripple);
            setTimeout(() => ripple.remove(), 500);
        });
    });
    // Disable n√∫t start n·∫øu ch∆∞a tick g√¨
    startButton.classList.remove('enabled');
}

function startQuiz() {
    if (!selectedMainTopic || selectedSubTopics.length === 0) return;
    selectionSection.style.display = 'none';
    loadingSection.style.display = 'block';
    document.getElementById('loadingText').textContent = `ƒêang t·∫£i d·ªØ li·ªáu...`;
    
    // Hi·ªÉn th·ªã th√¥ng tin ch·ªß ƒë·ªÅ ƒë√£ ch·ªçn
    const quizSubjectInfoContainer = document.getElementById('quizSubjectInfo');
    if (quizSubjectInfoContainer && selectedMainTopic) {
        quizSubjectInfoContainer.innerHTML = `
            <div class="icon">${selectedMainTopic.icon || 'üìö'}</div>
            <div class="details">
                <div class="title">${selectedMainTopic.name}</div>
                <div class="subtitle">${selectedMainTopic.subtitle}</div>
            </div>
        `;
        quizSubjectInfoContainer.style.display = 'flex';
    }

    loadMultipleCSVFiles(selectedSubTopics);
}

async function loadMultipleCSVFiles(fileList) {
    try {
        updateLoadingBar(20);
        let allQuestions = [];
        for (let i = 0; i < fileList.length; i++) {
            updateLoadingBar(20 + Math.floor(60 * i / fileList.length));
            const response = await fetch(`data/${fileList[i]}`);
            if (!response.ok) throw new Error(`Kh√¥ng th·ªÉ t·∫£i file ${fileList[i]} (${response.status})`);
            const csvData = await response.text();
            await new Promise(resolve => {
                Papa.parse(csvData, {
                    header: true,
                    skipEmptyLines: true,
                    complete: function(results) {
                        if (results.errors.length > 0) {
                            throw new Error('C√≥ l·ªói khi ƒë·ªçc file CSV: ' + results.errors[0].message);
                        }
                        // G·∫Øn th√™m thu·ªôc t√≠nh file ƒë·ªÉ bi·∫øt ngu·ªìn ch·ªß ƒë·ªÅ
                        const valid = results.data.filter(row => row.question && row.question.trim() && row.answer && row.answer.trim()).map(row => ({...row, file: fileList[i]}));
                        allQuestions = allQuestions.concat(valid);
                        resolve();
                    }
                });
            });
        }
        updateLoadingBar(100);
        if (allQuestions.length === 0) throw new Error('Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi h·ª£p l·ªá trong c√°c file ƒë√£ ch·ªçn');
        questions = allQuestions;
        stats = { total: 0, correct: 0, wrong: 0 };
        isAllQuestionsMode = false;
        allQuestionsAnswers = {};
        document.getElementById('totalQuestions').textContent = questions.length;
        updateStats();
        remainingQuestions = [...questions];
        setTimeout(() => {
            loadingSection.style.display = 'none';
            quizContainer.style.display = 'block';
            // Reset v·ªÅ ch·∫ø ƒë·ªô t·ª´ng c√¢u
            singleQuestionMode.style.display = 'block';
            allQuestionsMode.style.display = 'none';
            modeSwitchBtn.innerHTML = '<span class="mode-icon">üßô</span><span class="mode-text">Chuy·ªÉn sang ch·∫ø ƒë·ªô PH√ÅP S∆Ø</span>';
            loadRandomQuestion();
        }, 500);
    } catch (error) {
        loadingSection.innerHTML = `
            <div class="section-title">
                <span>‚ùå</span>
                <span>L·ªói t·∫£i d·ªØ li·ªáu</span>
            </div>
            <p style="color: #dc3545; margin: 15px 0; font-size: 1.1em;">${error.message}</p>
            <p style="color: #666; font-size: 0.9em; line-height: 1.5;">
                Vui l√≤ng ki·ªÉm tra:<br>
                ‚Ä¢ File c√≥ t·ªìn t·∫°i trong th∆∞ m·ª•c data/<br>
                ‚Ä¢ File c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng v·ªõi 3 c·ªôt: stt, question, answer<br>
                ‚Ä¢ ƒê∆∞·ªùng d·∫´n file ch√≠nh x√°c
            </p>
            <div style="display: flex; gap: 15px; justify-content: center; margin-top: 25px;">
                <button onclick="backToSelection()" class="btn btn-secondary">
                    ‚Üê Quay l·∫°i ch·ªçn ch·ªß ƒë·ªÅ
                </button>
                <button onclick="retryLoad()" class="btn btn-primary">
                    üîÑ Th·ª≠ l·∫°i
                </button>
            </div>
        `;
    }
}

function backToSelection() {
    quizContainer.style.display = 'none';
    selectionSection.style.display = 'block';
    // Reset c√°c gi√° tr·ªã
    currentQuestion = null;
    selectedAnswer = null;
    stats = { total: 0, correct: 0, wrong: 0 };
    isAllQuestionsMode = false;
    allQuestionsAnswers = {};
    updateStats();
    
    // Reset v·ªÅ ch·∫ø ƒë·ªô t·ª´ng c√¢u
    singleQuestionMode.style.display = 'block';
    allQuestionsMode.style.display = 'none';
    modeSwitchBtn.innerHTML = '<span class="mode-icon">üìù</span><span class="mode-text">Ch·∫ø ƒë·ªô t·ª´ng c√¢u</span>';
}

function retryLoad() {
    if (selectedMainTopic) {
        backToSelection();
        setTimeout(() => startQuiz(), 100);
    }
}

function updateLoadingBar(percentage) {
    const loadingBar = document.getElementById('loadingBar');
    if (loadingBar) {
        loadingBar.style.width = percentage + '%';
    }
}

function parseQuestionAndAnswers(raw) {
    // Chu·∫©n h√≥a xu·ªëng d√≤ng th√†nh \n ƒë·ªÉ nh·∫≠n di·ªán ƒë√°p √°n nhi·ªÅu d√≤ng
    let text = raw.replace(/\r\n|\r/g, '\n');
    // T√¨m v·ªã tr√≠ b·∫Øt ƒë·∫ßu ƒë√°p √°n a.
    let match = text.match(/([aA][\.|\)])\s?/);
    if (!match) return { question: text.trim(), answers: [] };
    let idx = text.indexOf(match[0]);
    let question = text.slice(0, idx).trim();
    let answers = text.slice(idx);
    // Regex 1: nh·∫≠n di·ªán ƒë√°p √°n ·ªü ƒë·∫ßu d√≤ng ho·∫∑c sau d·∫•u xu·ªëng d√≤ng
    let answerArr = [];
    let usedLabels = {};
    let regex1 = /(^|\n)([a-dA-D][\.|\)])\s*((?:.|\n)*?)(?=(?:\n[a-dA-D][\.|\)])|$)/g;
    let m;
    while ((m = regex1.exec(answers)) !== null) {
        let label = m[2].toUpperCase();
        if (!usedLabels[label] && answerArr.length < 4) {
            answerArr.push(m[3].trim().replace(/\s+/g, ' '));
            usedLabels[label] = true;
        }
    }
    // N·∫øu kh√¥ng ƒë·ªß 4 ƒë√°p √°n, th·ª≠ l·∫°i v·ªõi regex t√°ch li·ªÅn nhau tr√™n m·ªôt d√≤ng
    if (answerArr.length < 4) {
        answerArr = [];
        usedLabels = {};
        let regex2 = /([a-dA-D][\.|\)])\s*([^a-dA-D]*)/g;
        let m2;
        while ((m2 = regex2.exec(answers)) !== null && answerArr.length < 4) {
            let label = m2[1].toUpperCase();
            if (!usedLabels[label]) {
                let value = m2[2].replace(/\s+/g, ' ').trim();
                // Lo·∫°i b·ªè nh√£n ƒë√°p √°n ti·∫øp theo n·∫øu b·ªã d√≠nh v√†o
                value = value.replace(/([a-dA-D][\.|\)]).*/, '').trim();
                answerArr.push(value);
                usedLabels[label] = true;
            }
        }
    }
    if (answerArr.length < 4) {
        return { question: text.trim(), answers: [] };
    }
    return { question, answers: answerArr };
}

function loadRandomQuestion() {
    // N·∫øu h·∫øt c√¢u h·ªèi th√¨ ch√∫c m·ª´ng
    if (remainingQuestions.length === 0) {
        quizContainer.innerHTML = `
            <div class="result correct" style="font-size:1.5em; padding: 40px;">
                üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh to√†n b·ªô c√¢u h·ªèi!<br>Vui l√≤ng t·∫£i l·∫°i trang (F5) ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.<br><br>
                <div style='font-size:1em; text-align:left; max-width:400px; margin:24px auto 0 auto; background:rgba(25,118,210,0.06); border-radius:12px; padding:18px 24px;'>
                    <div style='text-align:center; font-weight:bold; text-transform:uppercase; letter-spacing:1px; margin-bottom:10px;'>K·∫øt qu·∫£ t·ªïng k·∫øt:</div>
                    ‚Ä¢ T·ªïng s·ªë c√¢u: <b>${stats.total}</b><br>
                    ‚Ä¢ S·ªë c√¢u ƒë√∫ng: <b style='color:#28a745;'>${stats.correct}</b><br>
                    ‚Ä¢ S·ªë c√¢u sai: <b style='color:#dc3545;'>${stats.wrong}</b><br>
                    ‚Ä¢ ƒê·ªô ch√≠nh x√°c: <b>${accuracy}%</b>
                </div>
            </div>
        `;
        return;
    }

    // ·∫®n n√∫t submit v√† next
    submitBtn.style.display = 'none';
    nextBtn.style.display = 'none';

    // Ch·ªçn c√¢u h·ªèi ng·∫´u nhi√™n t·ª´ remainingQuestions
    const randomIndex = Math.floor(Math.random() * remainingQuestions.length);
    currentQuestion = remainingQuestions[randomIndex];
    // X√≥a c√¢u h·ªèi n√†y kh·ªèi m·∫£ng ƒë·ªÉ kh√¥ng l·∫∑p l·∫°i
    remainingQuestions.splice(randomIndex, 1);
    
    // Reset tr·∫°ng th√°i answered cho c√¢u h·ªèi m·ªõi
    currentQuestion.answered = false;
    
    // Hi·ªÉn th·ªã s·ªë th·ª© t·ª± t·ª´ c·ªôt stt
    const questionNumber = currentQuestion.stt || '?';
    // X√°c ƒë·ªãnh lo·∫°i ch·ªß ƒë·ªÅ
    let subLabel = '';
    for (const topic of mainTopics) {
        for (const sub of topic.subTopics) {
            if (sub.file === currentQuestion.file) subLabel = sub.label;
        }
    }
    document.getElementById('questionNumber').textContent = `C√¢u h·ªèi #${questionNumber} ‚Äì ${subLabel}`;
    
    // Ph√¢n t√≠ch c√¢u h·ªèi v√† ƒë√°p √°n
    const parsed = parseQuestionAndAnswers(currentQuestion.question);
    questionText.innerHTML = parsed.question.replace(/\s+/g, ' ').trim();
    
    // T·∫°o 4 l·ª±a ch·ªçn A, B, C, D v·ªõi n·ªôi dung th·ª±c t·∫ø
    const options = ['A', 'B', 'C', 'D'];
    optionsContainer.innerHTML = '';
    
    options.forEach((option, idx) => {
        const optionDiv = document.createElement('div');
        optionDiv.className = 'option';
        optionDiv.innerHTML = `
            <div class="option-label">${option}</div>
            <div>${parsed.answers[idx] ? parsed.answers[idx] : ''}</div>
        `;
        optionDiv.addEventListener('click', () => selectOption(option, optionDiv));
        optionsContainer.appendChild(optionDiv);
    });
    
    // Reset tr·∫°ng th√°i
    selectedAnswer = null;
    result.style.display = 'block';
    
    // X√≥a c√°c class highlight
    document.querySelectorAll('.option').forEach(opt => {
        opt.classList.remove('selected', 'correct', 'incorrect');
        opt.style.pointerEvents = 'auto';
    });
}

function selectOption(option, optionElement) {
    // X√≥a selection c≈©
    document.querySelectorAll('.option').forEach(opt => {
        opt.classList.remove('selected');
    });
    
    // Ch·ªçn option m·ªõi
    optionElement.classList.add('selected');
    selectedAnswer = option;
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£ ngay l·∫≠p t·ª©c
    showResult();
}

function showResult() {
    const correctAnswer = currentQuestion.answer.trim().toUpperCase();
    const isCorrect = selectedAnswer === correctAnswer;
    
    // C·∫≠p nh·∫≠t th·ªëng k√™ ch·ªâ n·∫øu c√¢u h·ªèi ch∆∞a ƒë∆∞·ª£c tr·∫£ l·ªùi
    if (!currentQuestion.answered) {
        stats.total++;
        if (isCorrect) {
            stats.correct++;
        } else {
            stats.wrong++;
        }
        currentQuestion.answered = true;
        updateStats();
    }
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    document.querySelectorAll('.option').forEach(opt => {
        const optionLabel = opt.querySelector('.option-label').textContent;
        if (optionLabel === correctAnswer) {
            opt.classList.add('correct');
        } else if (optionLabel === selectedAnswer && !isCorrect) {
            opt.classList.add('incorrect');
        }
        opt.style.pointerEvents = 'none';
    });
    
    // Hi·ªÉn th·ªã th√¥ng b√°o k·∫øt qu·∫£
    result.style.display = 'block';
    result.innerHTML = '';
    
    // Ki·ªÉm tra n·∫øu h·∫øt c√¢u h·ªèi th√¨ hi·ªÉn th·ªã ch√∫c m·ª´ng v√† t·ªïng k·∫øt
    if (remainingQuestions.length === 0) {
        setTimeout(() => {
            const accuracy = stats.total > 0 ? Math.round((stats.correct / stats.total) * 100) : 0;
            quizContainer.innerHTML = `
                <div class="result correct" style="font-size:1.5em; padding: 40px;">
                    üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh to√†n b·ªô c√¢u h·ªèi!<br>Vui l√≤ng t·∫£i l·∫°i trang (F5) ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.<br><br>
                    <div style='font-size:1em; max-width:400px; margin:24px auto 0 auto; background:rgba(25,118,210,0.06); border-radius:12px; padding:18px 24px;'>
                        <div style='text-align:center; font-weight:bold; text-transform:uppercase; letter-spacing:1px; margin-bottom:10px;'>K·∫øt qu·∫£ t·ªïng k·∫øt:</div>
                        ‚Ä¢ T·ªïng s·ªë c√¢u: <b>${stats.total}</b><br>
                        ‚Ä¢ S·ªë c√¢u ƒë√∫ng: <b style='color:#28a745;'>${stats.correct}</b><br>
                        ‚Ä¢ S·ªë c√¢u sai: <b style='color:#dc3545;'>${stats.wrong}</b><br>
                        ‚Ä¢ ƒê·ªô ch√≠nh x√°c: <b>${accuracy}%</b>
                    </div>
                </div>
            `;
        }, 1200);
        nextBtn.style.display = 'none';
    } else {
        // Hi·ªÉn th·ªã n√∫t next
        nextBtn.style.display = 'inline-block';
    }
}

function submitAnswer() {
    // H√†m n√†y kh√¥ng c√≤n c·∫ßn thi·∫øt, nh∆∞ng gi·ªØ l·∫°i ƒë·ªÉ tr√°nh l·ªói
    if (!selectedAnswer) return;
    showResult();
}

function nextQuestion() {
    if (remainingQuestions.length === 0) return; // ƒê√£ h·∫øt c√¢u h·ªèi, kh√¥ng l√†m g√¨ n·ªØa
    loadRandomQuestion();
}

function updateStats() {
    document.getElementById('correctAnswers').textContent = stats.correct;
    document.getElementById('wrongAnswers').textContent = stats.wrong;
    
    const accuracy = stats.total > 0 ? Math.round((stats.correct / stats.total) * 100) : 0;
    document.getElementById('accuracy').textContent = accuracy + '%';
}

function toggleDisplayMode() {
    isAllQuestionsMode = !isAllQuestionsMode;

    // Reset b·ªô ƒë·∫øm khi chuy·ªÉn ch·∫ø ƒë·ªô
    stats = { total: 0, correct: 0, wrong: 0 };
    updateStats();

    // Reset ƒë√°p √°n ƒë√£ ch·ªçn v√† tr·∫°ng th√°i ƒë√∫ng/sai
    allQuestionsAnswers = {};
    if (questions && questions.length > 0) {
        questions.forEach(q => q.answered = false);
    }

    // ·∫®n/hi·ªán n√∫t v√†o ph√≤ng thi v√† khu v·ª±c th·ªëng k√™
    if (isAllQuestionsMode) {
        if (onlineExamBtn) onlineExamBtn.style.display = 'none';
        if (statsDiv) statsDiv.style.display = 'none';
        // Chuy·ªÉn sang ch·∫ø ƒë·ªô ph√©p thu·∫≠t
        singleQuestionMode.style.display = 'none';
        allQuestionsMode.style.display = 'block';
        modeSwitchBtn.innerHTML = '<span class="mode-icon">üìù</span><span class="mode-text">Chuy·ªÉn sang ch·∫ø ƒë·ªô √îN T·∫¨P</span>';
        renderAllQuestions();
    } else {
        if (onlineExamBtn) onlineExamBtn.style.display = '';
        if (statsDiv) statsDiv.style.display = '';
        // Chuy·ªÉn v·ªÅ ch·∫ø ƒë·ªô t·ª´ng c√¢u
        allQuestionsMode.style.display = 'none';
        singleQuestionMode.style.display = 'block';
        modeSwitchBtn.innerHTML = '<span class="mode-icon">üßô</span><span class="mode-text">Chuy·ªÉn sang ch·∫ø ƒë·ªô ph√°p s∆∞</span>';
        // Reset l·∫°i tr·∫°ng th√°i √¥n t·∫≠p
        remainingQuestions = [...questions];
        currentQuestion = null;
        loadRandomQuestion();
    }
}

function renderAllQuestions(filterText = '') {
    if (!questions || questions.length === 0) return;
    
    allQuestionsList.innerHTML = '';
    
    // L·ªçc c√¢u h·ªèi theo n·ªôi dung n·∫øu c√≥ filterText
    let filteredQuestions = questions;
    if (filterText && filterText.trim() !== '') {
        const keyword = filterText.trim().toLowerCase();
        filteredQuestions = questions.filter(q => {
            const parsed = parseQuestionAndAnswers(q.question);
            return parsed.question.toLowerCase().includes(keyword);
        });
    }
    
    filteredQuestions.forEach((question, index) => {
        const parsed = parseQuestionAndAnswers(question.question);
        const questionNumber = question.stt || (index + 1);
        
        // X√°c ƒë·ªãnh lo·∫°i ch·ªß ƒë·ªÅ
        let subLabel = '';
        for (const topic of mainTopics) {
            for (const sub of topic.subTopics) {
                if (sub.file === question.file) subLabel = sub.label;
            }
        }
        
        const questionDiv = document.createElement('div');
        questionDiv.className = 'question-item';
        questionDiv.innerHTML = `
            <div class="question-item-header">
                <span class="question-item-number">C√¢u h·ªèi #${questionNumber}</span>
                <span class="question-item-subject">${subLabel}</span>
            </div>
            <div class="question-item-text">${parsed.question.replace(/\s+/g, ' ').trim()}</div>
            <div class="question-item-options">
                ${['A', 'B', 'C', 'D'].map((option, idx) => `
                    <div class="question-item-option" data-question="${index}" data-option="${option}">
                        <span class="question-item-option-label">${option}</span>
                        <span>${parsed.answers[idx] ? parsed.answers[idx] : ''}</span>
                    </div>
                `).join('')}
            </div>
            <div class="question-item-result" id="result-${index}"></div>
        `;
        
        allQuestionsList.appendChild(questionDiv);
        
        // Th√™m event listeners cho c√°c option
        const options = questionDiv.querySelectorAll('.question-item-option');
        options.forEach(option => {
            option.addEventListener('click', () => selectAllQuestionsOption(option, question, index));
        });
        
        // Hi·ªÉn th·ªã ƒë√°p √°n ƒë√£ ch·ªçn tr∆∞·ªõc ƒë√≥ n·∫øu c√≥
        if (allQuestionsAnswers[question.stt]) {
            const selectedOption = questionDiv.querySelector(`[data-option="${allQuestionsAnswers[question.stt]}"]`);
            if (selectedOption) {
                showAllQuestionsResult(selectedOption, question, index);
            }
        }
        // N·∫øu b·∫≠t ch·∫ø ƒë·ªô hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng, lu√¥n highlight ƒë√°p √°n ƒë√∫ng v√† disable ch·ªçn ƒë√°p √°n
        if (isShowAllAnswers) {
            const correctAnswer = question.answer.trim().toUpperCase();
            const correctOption = questionDiv.querySelector(`[data-option="${correctAnswer}"]`);
            if (correctOption) {
                correctOption.classList.add('correct');
            }
            // Disable ch·ªçn ƒë√°p √°n cho t·∫•t c·∫£ option
            questionDiv.querySelectorAll('.question-item-option').forEach(opt => {
                opt.style.pointerEvents = 'none';
            });
        } else {
            // Cho ph√©p ch·ªçn l·∫°i ƒë√°p √°n khi t·∫Øt ch·∫ø ƒë·ªô hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng
            questionDiv.querySelectorAll('.question-item-option').forEach(opt => {
                opt.style.pointerEvents = '';
                opt.style.opacity = '';
            });
        }
    });
}

function selectAllQuestionsOption(optionElement, question, questionIndex) {
    const selectedOption = optionElement.getAttribute('data-option');
    const questionDiv = optionElement.closest('.question-item');
    
    // X√≥a selection c≈© trong c√¢u h·ªèi n√†y
    questionDiv.querySelectorAll('.question-item-option').forEach(opt => {
        opt.classList.remove('selected');
    });
    
    // Ch·ªçn option m·ªõi
    optionElement.classList.add('selected');
    
    // L∆∞u ƒë√°p √°n ƒë√£ ch·ªçn theo stt (duy nh·∫•t cho m·ªói c√¢u)
    allQuestionsAnswers[question.stt] = selectedOption;
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£ ngay l·∫≠p t·ª©c
    showAllQuestionsResult(optionElement, question, questionIndex);
}

function showAllQuestionsResult(optionElement, question, questionIndex) {
    const correctAnswer = question.answer.trim().toUpperCase();
    const selectedAnswer = optionElement.getAttribute('data-option');
    const isCorrect = selectedAnswer === correctAnswer;
    
    // Ch·ªâ c·∫≠p nh·∫≠t b·ªô ƒë·∫øm n·∫øu ch∆∞a t·ª´ng tr·∫£ l·ªùi c√¢u n√†y
    if (!question.answered) {
        stats.total++;
        if (isCorrect) {
            stats.correct++;
        } else {
            stats.wrong++;
        }
        question.answered = true;
        updateStats();
    }
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£ cho t·∫•t c·∫£ options trong c√¢u h·ªèi n√†y
    const questionDiv = optionElement.closest('.question-item');
    questionDiv.querySelectorAll('.question-item-option').forEach(opt => {
        const optionLabel = opt.getAttribute('data-option');
        opt.style.pointerEvents = 'none';
        
        if (optionLabel === correctAnswer) {
            opt.classList.add('correct');
        } else if (optionLabel === selectedAnswer && !isCorrect) {
            opt.classList.add('incorrect');
        }
    });
    
    // Kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o k·∫øt qu·∫£
    const resultDiv = questionDiv.querySelector('.question-item-result');
    resultDiv.style.display = 'none';
}

if (allQuestionsSearchInput) {
    allQuestionsSearchInput.addEventListener('input', function() {
        renderAllQuestions(this.value);
    });
}
if (showAllAnswersBtn) {
    showAllAnswersBtn.addEventListener('click', function() {
        isShowAllAnswers = !isShowAllAnswers;
        showAllAnswersBtn.classList.toggle('active', isShowAllAnswers);
        showAllAnswersBtn.textContent = isShowAllAnswers ? '·∫®n ƒë√°p √°n ƒë√∫ng' : 'Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng';
        renderAllQuestions(allQuestionsSearchInput ? allQuestionsSearchInput.value : '');
    });
} 