// Danh s√°ch c√°c ch·ªß ƒë·ªÅ v√† file t∆∞∆°ng ·ª©ng
const topics = [
    {
        title: "C·∫ßu - H·∫ßm, Ph√°p lu·∫≠t chung",
        subtitle: "Thi·∫øt k·∫ø x√¢y d·ª±ng c√¥ng tr√¨nh - C√¥ng tr√¨nh C·∫ßu - H·∫ßm - H·∫°ng II",
        file: "Hamcau_PLC.csv",
        icon: "üåâ"
    },
    {
        title: "C·∫ßu - H·∫ßm, Ph√°p lu·∫≠t ri√™ng", 
        subtitle: "Thi·∫øt k·∫ø x√¢y d·ª±ng c√¥ng tr√¨nh - C√¥ng tr√¨nh C·∫ßu - H·∫ßm - H·∫°ng II",
        file: "Hamcau_PLR.csv",
        icon: "üåâ"
    },
    {
        title: "C·∫ßu - H·∫ßm, Chuy√™n m√¥n", 
        subtitle: "Thi·∫øt k·∫ø x√¢y d·ª±ng c√¥ng tr√¨nh - C√¥ng tr√¨nh C·∫ßu - H·∫ßm - H·∫°ng II",
        file: "Hamcau_CM.csv",
        icon: "üåâ"
    },
    {
        title: "ƒê·ªãnh gi√°, Ph√°p lu·∫≠t chung", 
        subtitle: "ƒê·ªãnh gi√° x√¢y d·ª±ng - H·∫°ng II",
        file: "Dinhgia_PLC.csv",
        icon: "üí∞"
    },
    {
        title: "ƒê·ªãnh gi√°, Ph√°p lu·∫≠t ri√™ng", 
        subtitle: "ƒê·ªãnh gi√° x√¢y d·ª±ng - H·∫°ng II",
        file: "Dinhgia_PLR.csv",
        icon: "üí∞"
    },
    {
        title: "ƒê·ªãnh gi√°, Chuy√™n m√¥n", 
        subtitle: "ƒê·ªãnh gi√° x√¢y d·ª±ng - H·∫°ng II",
        file: "Dinhgia_CM.csv",
        icon: "üí∞"
    },
    {
        title: "Kh·∫£o s√°t ƒë·ªãa h√¨nh, Ph√°p lu·∫≠t chung", 
        subtitle: "Kh·∫£o s√°t ƒë·ªãa h√¨nh - H·∫°ng II",
        file: "Khaosatdiahinh_PLC.csv",
        icon: "üîç"
    },
    {
        title: "Kh·∫£o s√°t ƒë·ªãa h√¨nh, Ph√°p lu·∫≠t ri√™ng", 
        subtitle: "Kh·∫£o s√°t ƒë·ªãa h√¨nh - H·∫°ng II",
        file: "Khaosatdiahinh_PLR.csv",
        icon: "üîç"
    },
    {
        title: "Kh·∫£o s√°t ƒë·ªãa h√¨nh, Chuy√™n m√¥n", 
        subtitle: "Kh·∫£o s√°t ƒë·ªãa h√¨nh - H·∫°ng II",
        file: "Khaosatdiahinh_CM.csv",
        icon: "üîç"
    },
    {
        title: "Kh·∫£o s√°t ƒë·ªãa ch·∫•t, Ph√°p lu·∫≠t chung", 
        subtitle: "Kh·∫£o s√°t ƒë·ªãa ch·∫•t - H·∫°ng III",
        file: "Khaosatdiachat_PLC.csv",
        icon: "üíé"
    },
    {
        title: "Kh·∫£o s√°t ƒë·ªãa ch·∫•t, Ph√°p lu·∫≠t ri√™ng", 
        subtitle: "Kh·∫£o s√°t ƒë·ªãa ch·∫•t - H·∫°ng III",
        file: "Khaosatdiachat_PLR.csv",
        icon: "üíé"
    },
    {
        title: "Kh·∫£o s√°t ƒë·ªãa ch·∫•t, Chuy√™n m√¥n", 
        subtitle: "Kh·∫£o s√°t ƒë·ªãa ch·∫•t - H·∫°ng III",
        file: "Khaosatdiachat_CM.csv",
        icon: "üíé"
    }    
];

let questions = [];
let currentQuestion = null;
let selectedAnswer = null;
let currentTopic = null;
let stats = {
    total: 0,
    correct: 0,
    wrong: 0
};

let remainingQuestions = [];

const selectionSection = document.getElementById('selectionSection');
const loadingSection = document.getElementById('loadingSection');
const quizContainer = document.getElementById('quizContainer');
const questionText = document.getElementById('questionText');
const optionsContainer = document.getElementById('optionsContainer');
const submitBtn = document.getElementById('submitBtn');
const nextBtn = document.getElementById('nextBtn');
const result = document.getElementById('result');
const selectStyled = document.getElementById('selectStyled');
const selectOptions = document.getElementById('selectOptions');
const startButton = document.getElementById('startButton');

// Kh·ªüi t·∫°o dropdown v√† events
window.addEventListener('load', initializeDropdown);
submitBtn.addEventListener('click', submitAnswer);
nextBtn.addEventListener('click', nextQuestion);
startButton.addEventListener('click', startQuiz);

// ƒê√≥ng dropdown khi click b√™n ngo√†i
document.addEventListener('click', function(e) {
    if (!e.target.closest('.custom-select')) {
        selectOptions.classList.remove('show');
        selectStyled.classList.remove('active');
    }
});

function initializeDropdown() {
    // T·∫°o options cho dropdown
    selectOptions.innerHTML = '';
    topics.forEach((topic, index) => {
        const optionDiv = document.createElement('div');
        optionDiv.className = 'select-option';
        optionDiv.innerHTML = `
            <div style="display: flex; align-items: flex-start; gap: 12px;">
                <span class="option-icon" style="font-size: 2em; display: flex; align-items: flex-start; font-style: normal;">${topic.icon}</span>
                <div style="display: flex; flex-direction: column;">
                    <span style="font-weight: 600; color: #222; font-style: normal;">${topic.title}</span>
                    <span style="font-size: 0.98em; color: #888; font-style: normal;">${topic.subtitle}</span>
                </div>
            </div>
        `;
        optionDiv.addEventListener('click', () => selectTopic(topic, index));
        selectOptions.appendChild(optionDiv);
    });

    // Event cho dropdown toggle
    selectStyled.addEventListener('click', function() {
        selectOptions.classList.toggle('show');
        selectStyled.classList.toggle('active');
    });
}

function selectTopic(topic, index) {
    currentTopic = topic;
    
    // C·∫≠p nh·∫≠t hi·ªÉn th·ªã dropdown
    selectStyled.innerHTML = `
        <div style="display: flex; align-items: flex-start; gap: 12px;">
            <span class="option-icon" style="font-size: 2em; display: flex; align-items: flex-start; font-style: normal;">${topic.icon}</span>
            <div style="display: flex; flex-direction: column;">
                <span style="font-weight: 600; color: #222; font-style: normal;">${topic.title}</span>
                <span style="font-size: 0.98em; color: #888; font-style: normal;">${topic.subtitle}</span>
            </div>
        </div>
    `;
    
    // ƒê√≥ng dropdown
    selectOptions.classList.remove('show');
    selectStyled.classList.remove('active');
    
    // Enable n√∫t start
    startButton.classList.add('enabled');
}

function startQuiz() {
    if (!currentTopic) return;
    
    selectionSection.style.display = 'none';
    loadingSection.style.display = 'block';
    document.getElementById('loadingText').textContent = `ƒêang t·∫£i d·ªØ li·ªáu...`;
    loadCSVFile(currentTopic.file);
}

async function loadCSVFile(filename) {
    try {
        // Hi·ªáu ·ª©ng loading
        updateLoadingBar(20);
        
        const response = await fetch(`data/${filename}`);
        if (!response.ok) {
            throw new Error(`Kh√¥ng th·ªÉ t·∫£i file ${filename} (${response.status})`);
        }
        
        updateLoadingBar(50);
        
        const csvData = await response.text();
        updateLoadingBar(70);
        
        Papa.parse(csvData, {
            header: true,
            skipEmptyLines: true,
            complete: function(results) {
                updateLoadingBar(90);
                
                if (results.errors.length > 0) {
                    throw new Error('C√≥ l·ªói khi ƒë·ªçc file CSV: ' + results.errors[0].message);
                }
                
                questions = results.data.filter(row => 
                    row.question && row.question.trim() && 
                    row.answer && row.answer.trim()
                );
                
                if (questions.length === 0) {
                    throw new Error('Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi h·ª£p l·ªá trong file CSV');
                }

                updateLoadingBar(100);
                
                // Reset th·ªëng k√™
                stats = { total: 0, correct: 0, wrong: 0 };
                
                // C·∫≠p nh·∫≠t th·ªëng k√™
                document.getElementById('totalQuestions').textContent = questions.length;
                updateStats();
                
                // Kh·ªüi t·∫°o m·∫£ng c√¢u h·ªèi ch∆∞a l√†m
                remainingQuestions = [...questions];
                
                // Hi·ªÉn th·ªã quiz sau m·ªôt ch√∫t delay
                setTimeout(() => {
                    loadingSection.style.display = 'none';
                    quizContainer.style.display = 'block';
                    loadRandomQuestion();
                }, 500);
            }
        });
    } catch (error) {
        // Hi·ªÉn th·ªã l·ªói
        loadingSection.innerHTML = `
            <div class="section-title">
                <span>‚ùå</span>
                <span>L·ªói t·∫£i d·ªØ li·ªáu</span>
            </div>
            <p style="color: #dc3545; margin: 15px 0; font-size: 1.1em;">${error.message}</p>
            <p style="color: #666; font-size: 0.9em; line-height: 1.5;">
                Vui l√≤ng ki·ªÉm tra:<br>
                ‚Ä¢ File ${filename} c√≥ t·ªìn t·∫°i trong th∆∞ m·ª•c data/<br>
                ‚Ä¢ File c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng v·ªõi 3 c·ªôt: stt, question, answer<br>
                ‚Ä¢ ƒê∆∞·ªùng d·∫´n file ch√≠nh x√°c
            </p>
            <div style="display: flex; gap: 15px; justify-content: center; margin-top: 25px;">
                <button onclick="backToSelection()" class="btn btn-secondary">
                    ‚Üê Quay l·∫°i ch·ªçn ch·ªß ƒë·ªÅ
                </button>
                <button onclick="retryLoad()" class="btn btn-primary">
                    üîÑ Th·ª≠ l·∫°i
                </button>
            </div>
        `;
    }
}

function backToSelection() {
    loadingSection.style.display = 'none';
    quizContainer.style.display = 'none';
    selectionSection.style.display = 'block';
    
    // Reset loading section
    loadingSection.innerHTML = `
        <div class="section-title">
            <span>‚è≥</span>
            <span>ƒêang t·∫£i d·ªØ li·ªáu...</span>
        </div>
        <p class="loading-text" id="loadingText">ƒêang ƒë·ªçc d·ªØ li·ªáu...</p>
        <div class="loading-bar-container">
            <div class="loading-bar" id="loadingBar"></div>
        </div>
    `;
}

function retryLoad() {
    if (currentTopic) {
        backToSelection();
        setTimeout(() => startQuiz(), 100);
    }
}

function updateLoadingBar(percentage) {
    const loadingBar = document.getElementById('loadingBar');
    if (loadingBar) {
        loadingBar.style.width = percentage + '%';
    }
}

function formatQuestionText(raw) {
    // Chu·∫©n h√≥a xu·ªëng d√≤ng th√†nh 1 d√≤ng
    let text = raw.replace(/\r\n|\r|\n/g, ' ');

    // T√¨m v·ªã tr√≠ b·∫Øt ƒë·∫ßu ƒë√°p √°n a.
    let match = text.match(/([aA][\.|\)]\s)/);
    if (!match) return text.trim();

    let idx = text.indexOf(match[0]);
    let question = text.slice(0, idx).trim();
    let answers = text.slice(idx);

    // T√°ch ƒë√°p √°n, ch·ªâ l·∫•y ƒë√∫ng 4 ƒë√°p √°n a, b, c, d (kh√¥ng l·∫∑p, kh√¥ng tr√πng)
    let answerArr = [];
    let usedLabels = {};
    let regex = /([a-dA-D][\.|\)])\s(.*?)(?= [a-dA-D][\.|\)]|$)/g;
    let m;
    while ((m = regex.exec(answers)) !== null) {
        let label = m[1].toLowerCase();
        if (!usedLabels[label] && answerArr.length < 4) {
            answerArr.push(`<b>${m[1].toLowerCase()}</b> ${m[2].trim()}`);
            usedLabels[label] = true;
        }
    }

    // N·∫øu kh√¥ng ƒë·ªß 4 ƒë√°p √°n, fallback v·ªÅ t√°ch c≈©
    if (answerArr.length < 4) {
        return text.replace(/([a-d]\.)/gi, '<br><b>$1</b>').replace(/^<br>/, '').trim();
    }

    return `<div style="margin-bottom:10px;">${question}</div>` + answerArr.map(a => `<div style="margin-bottom:4px;">${a}</div>`).join('');
}

function loadRandomQuestion() {
    // N·∫øu h·∫øt c√¢u h·ªèi th√¨ ch√∫c m·ª´ng
    if (remainingQuestions.length === 0) {
        quizContainer.innerHTML = `
            <div class="result correct" style="font-size:1.5em; padding: 40px;">
                üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh to√†n b·ªô c√¢u h·ªèi!<br>Vui l√≤ng t·∫£i l·∫°i trang (F5) ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.<br><br>
                <div style='font-size:1em; text-align:left; max-width:400px; margin:24px auto 0 auto; background:rgba(25,118,210,0.06); border-radius:12px; padding:18px 24px;'>
                    <div style='text-align:center; font-weight:bold; text-transform:uppercase; letter-spacing:1px; margin-bottom:10px;'>K·∫øt qu·∫£ t·ªïng k·∫øt:</div>
                    ‚Ä¢ T·ªïng s·ªë c√¢u: <b>${stats.total}</b><br>
                    ‚Ä¢ S·ªë c√¢u ƒë√∫ng: <b style='color:#28a745;'>${stats.correct}</b><br>
                    ‚Ä¢ S·ªë c√¢u sai: <b style='color:#dc3545;'>${stats.wrong}</b><br>
                    ‚Ä¢ ƒê·ªô ch√≠nh x√°c: <b>${accuracy}%</b>
                </div>
            </div>
        `;
        return;
    }

    // Lu√¥n reset l·∫°i n√∫t x√°c nh·∫≠n ƒë√°p √°n
    submitBtn.style.display = 'inline-block';
    submitBtn.disabled = true;
    nextBtn.style.display = 'none';

    // Ch·ªçn c√¢u h·ªèi ng·∫´u nhi√™n t·ª´ remainingQuestions
    const randomIndex = Math.floor(Math.random() * remainingQuestions.length);
    currentQuestion = remainingQuestions[randomIndex];
    // X√≥a c√¢u h·ªèi n√†y kh·ªèi m·∫£ng ƒë·ªÉ kh√¥ng l·∫∑p l·∫°i
    remainingQuestions.splice(randomIndex, 1);
    
    // Hi·ªÉn th·ªã s·ªë th·ª© t·ª± t·ª´ c·ªôt stt
    const questionNumber = currentQuestion.stt || '?';
    document.getElementById('questionNumber').textContent = `C√¢u h·ªèi #${questionNumber}`;
    
    // Hi·ªÉn th·ªã c√¢u h·ªèi v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp
    questionText.innerHTML = formatQuestionText(currentQuestion.question);
    
    // T·∫°o 4 l·ª±a ch·ªçn A, B, C, D
    const options = ['A', 'B', 'C', 'D'];
    optionsContainer.innerHTML = '';
    
    options.forEach(option => {
        const optionDiv = document.createElement('div');
        optionDiv.className = 'option';
        optionDiv.innerHTML = `
            <div class="option-label">${option}</div>
            <div>L·ª±a ch·ªçn ${option}</div>
        `;
        optionDiv.addEventListener('click', () => selectOption(option, optionDiv));
        optionsContainer.appendChild(optionDiv);
    });
    
    // Reset tr·∫°ng th√°i
    selectedAnswer = null;
    result.style.display = 'none';
    
    // X√≥a c√°c class highlight
    document.querySelectorAll('.option').forEach(opt => {
        opt.classList.remove('selected', 'correct', 'incorrect');
    });
}

function selectOption(option, optionElement) {
    // X√≥a selection c≈©
    document.querySelectorAll('.option').forEach(opt => {
        opt.classList.remove('selected');
    });
    
    // Ch·ªçn option m·ªõi
    optionElement.classList.add('selected');
    selectedAnswer = option;
    submitBtn.disabled = false;
}

function submitAnswer() {
    if (!selectedAnswer) return;
    
    const correctAnswer = currentQuestion.answer.trim().toUpperCase();
    const isCorrect = selectedAnswer === correctAnswer;
    
    // C·∫≠p nh·∫≠t th·ªëng k√™
    stats.total++;
    if (isCorrect) {
        stats.correct++;
    } else {
        stats.wrong++;
    }
    updateStats();
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    document.querySelectorAll('.option').forEach(opt => {
        const optionLabel = opt.querySelector('.option-label').textContent;
        if (optionLabel === correctAnswer) {
            opt.classList.add('correct');
        } else if (optionLabel === selectedAnswer && !isCorrect) {
            opt.classList.add('incorrect');
        }
        opt.style.pointerEvents = 'none';
    });
    
    // Hi·ªÉn th·ªã th√¥ng b√°o k·∫øt qu·∫£
    result.style.display = 'block';
    if (isCorrect) {
        result.className = 'result correct';
        result.innerHTML = 'üéâ Ch√≠nh x√°c! ƒê√°p √°n ƒë√∫ng l√†: ' + correctAnswer;
    } else {
        result.className = 'result incorrect';
        result.innerHTML = '‚ùå Sai r·ªìi! ƒê√°p √°n ƒë√∫ng l√†: ' + correctAnswer;
    }
    
    // Ki·ªÉm tra n·∫øu h·∫øt c√¢u h·ªèi th√¨ hi·ªÉn th·ªã ch√∫c m·ª´ng v√† t·ªïng k·∫øt
    if (remainingQuestions.length === 0) {
        setTimeout(() => {
            const accuracy = stats.total > 0 ? Math.round((stats.correct / stats.total) * 100) : 0;
            quizContainer.innerHTML = `
                <div class="result correct" style="font-size:1.5em; padding: 40px;">
                    üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh to√†n b·ªô c√¢u h·ªèi!<br>Vui l√≤ng t·∫£i l·∫°i trang (F5) ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.<br><br>
                    <div style='font-size:1em; max-width:400px; margin:24px auto 0 auto; background:rgba(25,118,210,0.06); border-radius:12px; padding:18px 24px;'>
                        <div style='text-align:center; font-weight:bold; text-transform:uppercase; letter-spacing:1px; margin-bottom:10px;'>K·∫øt qu·∫£ t·ªïng k·∫øt:</div>
                        ‚Ä¢ T·ªïng s·ªë c√¢u: <b>${stats.total}</b><br>
                        ‚Ä¢ S·ªë c√¢u ƒë√∫ng: <b style='color:#28a745;'>${stats.correct}</b><br>
                        ‚Ä¢ S·ªë c√¢u sai: <b style='color:#dc3545;'>${stats.wrong}</b><br>
                        ‚Ä¢ ƒê·ªô ch√≠nh x√°c: <b>${accuracy}%</b>
                    </div>
                </div>
            `;
        }, 1200);
        submitBtn.style.display = 'none';
        nextBtn.style.display = 'none';
    } else {
        // Hi·ªÉn th·ªã n√∫t next
        submitBtn.style.display = 'none';
        nextBtn.style.display = 'inline-block';
    }
}

function nextQuestion() {
    if (remainingQuestions.length === 0) return; // ƒê√£ h·∫øt c√¢u h·ªèi, kh√¥ng l√†m g√¨ n·ªØa
    loadRandomQuestion();
    submitBtn.style.display = 'inline-block';
    document.querySelectorAll('.option').forEach(opt => {
        opt.style.pointerEvents = 'auto';
    });
}

function updateStats() {
    document.getElementById('correctAnswers').textContent = stats.correct;
    document.getElementById('wrongAnswers').textContent = stats.wrong;
    
    const accuracy = stats.total > 0 ? Math.round((stats.correct / stats.total) * 100) : 0;
    document.getElementById('accuracy').textContent = accuracy + '%';
} 