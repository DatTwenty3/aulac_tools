// L·∫•y c√°c tham chi·∫øu ƒë·∫øn c√°c ph·∫ßn t·ª≠ DOM
const fileInput = document.getElementById('file-input');
const pdfList = document.getElementById('pdf-list');
const mergeBtn = document.getElementById('merge-btn');

// M·∫£ng ƒë·ªÉ l∆∞u tr·ªØ c√°c file PDF ƒë∆∞·ª£c upload
let pdfFiles = [];

// X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng ch·ªçn file
fileInput.addEventListener('change', (e) => {
  const files = Array.from(e.target.files);
  files.forEach(file => {
    // Ch·ªâ x·ª≠ l√Ω c√°c file PDF
    if (file.type === "application/pdf") {
      pdfFiles.push(file);
      addFileToList(file);
    }
  });
});

// H√†m th√™m m·ªôt card file v√†o danh s√°ch hi·ªÉn th·ªã, c√≥ background l√† preview trang ƒë·∫ßu ti√™n c·ªßa file PDF
function addFileToList(file) {
  // T·∫°o card container
  const card = document.createElement('div');
  card.classList.add('pdf-card');
  card.setAttribute('data-filename', file.name);

  // T·∫°o overlay ch·ª©a icon v√† t√™n file
  const overlay = document.createElement('div');
  overlay.classList.add('overlay');

  const icon = document.createElement('img');
  icon.classList.add('pdf-icon');
  icon.src = "https://img.icons8.com/color/48/000000/pdf.png";
  icon.alt = "PDF Icon";

  const name = document.createElement('div');
  name.classList.add('pdf-name');
  name.textContent = file.name;

  overlay.appendChild(icon);
  overlay.appendChild(name);
  card.appendChild(overlay);
  pdfList.appendChild(card);

  // T·∫°o URL t·∫°m th·ªùi cho file PDF
  const fileURL = URL.createObjectURL(file);

  // S·ª≠ d·ª•ng PDF.js ƒë·ªÉ render trang ƒë·∫ßu ti√™n c·ªßa PDF
  pdfjsLib.getDocument(fileURL).promise
    .then(pdf => pdf.getPage(1))
    .then(page => {
      // Thi·∫øt l·∫≠p t·ª∑ l·ªá ƒë·ªÉ t·∫°o preview (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh scale n·∫øu c·∫ßn)
      const scale = 1;
      const viewport = page.getViewport({ scale });
      const canvas = document.createElement('canvas');
      canvas.width = viewport.width;
      canvas.height = viewport.height;
      const context = canvas.getContext('2d');
      return page.render({ canvasContext: context, viewport: viewport }).promise.then(() => canvas.toDataURL());
    })
    .then(dataUrl => {
      // G√°n data URL c·ªßa canvas l√†m background cho card
      card.style.backgroundImage = `url(${dataUrl})`;
      card.style.backgroundSize = "cover";
      card.style.backgroundPosition = "center";
    })
    .catch(err => {
      console.error("L·ªói t·∫£i preview PDF:", err);
    });
}

// S·ª≠ d·ª•ng SortableJS ƒë·ªÉ k√≠ch ho·∫°t ch·ª©c nƒÉng k√©o th·∫£ s·∫Øp x·∫øp
Sortable.create(pdfList, {
  animation: 150,
  onEnd: () => {
    // Sau khi k√©o th·∫£, c·∫≠p nh·∫≠t l·∫°i th·ª© t·ª± trong m·∫£ng pdfFiles theo th·ª© t·ª± hi·ªÉn th·ªã
    const newOrder = [];
    const items = pdfList.querySelectorAll('.pdf-card');
    items.forEach(item => {
      const file = pdfFiles.find(f => f.name === item.getAttribute('data-filename'));
      if (file) {
        newOrder.push(file);
      }
    });
    pdfFiles = newOrder;
  }
});

// H√†m gh√©p c√°c file PDF
mergeBtn.addEventListener('click', async () => {
  if (pdfFiles.length === 0) {
    alert("Vui l√≤ng upload √≠t nh·∫•t 1 file PDF");
    return;
  }

  try {
    // T·∫°o t√†i li·ªáu PDF m·ªõi d√πng pdf-lib
    const mergedPdf = await PDFLib.PDFDocument.create();

    // Duy·ªát qua t·ª´ng file theo th·ª© t·ª± ƒë√£ s·∫Øp x·∫øp
    for (let file of pdfFiles) {
      const arrayBuffer = await file.arrayBuffer();
      const pdf = await PDFLib.PDFDocument.load(arrayBuffer);
      const copiedPages = await mergedPdf.copyPages(pdf, pdf.getPageIndices());
      copiedPages.forEach((page) => {
        mergedPdf.addPage(page);
      });
    }

    // L∆∞u file PDF m·ªõi th√†nh blob v√† k√≠ch ho·∫°t download
    const mergedPdfFile = await mergedPdf.save();
    download(new Blob([mergedPdfFile], { type: 'application/pdf' }), 'AULAC_merged.pdf'); // üî• ƒê·ªïi t√™n file t·∫£i v·ªÅ
  } catch (error) {
    console.error("L·ªói trong qu√° tr√¨nh gh√©p PDF:", error);
  }
});

// H√†m t·∫°o v√† k√≠ch ho·∫°t download cho file blob
function download(blob, filename) {
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}
