// phongthi.js - X·ª≠ l√Ω logic thi tr·ª±c tuy·∫øn
document.addEventListener('DOMContentLoaded', function() {
    const selectStyled = document.getElementById('selectStyled');
    const selectOptions = document.getElementById('selectOptions');
    const startButton = document.getElementById('startButton');
    const selectPlaceholder = selectStyled.querySelector('.select-placeholder');
    const selectionSection = document.getElementById('selectionSection');
    const examSection = document.getElementById('examSection');
    const resultSection = document.getElementById('resultSection');
    const questionsContainer = document.getElementById('questionsContainer');
    const timerValue = document.getElementById('timerValue');
    const submitButton = document.getElementById('submitButton');

    // Danh s√°ch c√°c m√¥n thi
    const subjects = [
        { 
            id: 'hamcau',
            title: 'C·∫ßu - H·∫ßm',
            subtitle: 'Thi ch·ª©ng ch·ªâ h√†nh ngh·ªÅ C·∫ßu - H·∫ßm',
            files: {
                law: ['data/Hamcau_PLC.csv', 'data/Hamcau_PLR.csv'],
                specialized: ['data/Hamcau_CM.csv']
            }
        },
        { 
            id: 'diahinh',
            title: 'ƒê·ªãa h√¨nh, ƒë·ªãa ch·∫•t c√¥ng tr√¨nh',
            subtitle: 'Thi ch·ª©ng ch·ªâ h√†nh ngh·ªÅ ƒê·ªãa h√¨nh, ƒë·ªãa ch·∫•t c√¥ng tr√¨nh',
            files: {
                law: ['data/Diahinh_PLC.csv', 'data/Diahinh_PLR.csv'],
                specialized: ['data/Diahinh_CM.csv']
            }
        },
        { 
            id: 'dinhgia',
            title: 'ƒê·ªãnh gi√° x√¢y d·ª±ng',
            subtitle: 'Thi ch·ª©ng ch·ªâ h√†nh ngh·ªÅ ƒê·ªãnh gi√° x√¢y d·ª±ng',
            files: {
                law: ['data/Dinhgia_PLC.csv', 'data/Dinhgia_PLR.csv'],
                specialized: ['data/Dinhgia_CM.csv']
            }
        }
    ];

    // T·∫°o danh s√°ch ch·ªçn m√¥n thi
    subjects.forEach(subject => {
        const option = document.createElement('div');
        option.className = 'select-option';
        option.innerHTML = `
            <div class="option-icon">üìö</div>
            <div class="option-content">
                <div class="option-title">${subject.title}</div>
                <div class="option-subtitle">${subject.subtitle}</div>
            </div>
        `;
        option.addEventListener('click', () => {
            selectPlaceholder.textContent = subject.title;
            selectStyled.classList.remove('active');
            selectOptions.classList.remove('show');
            startButton.classList.add('enabled');
            startButton.dataset.subjectId = subject.id;
        });
        selectOptions.appendChild(option);
    });

    // X·ª≠ l√Ω s·ª± ki·ªán khi click v√†o select-styled
    selectStyled.addEventListener('click', function() {
        selectStyled.classList.toggle('active');
        selectOptions.classList.toggle('show');
    });

    // Bi·∫øn l∆∞u tr·ªØ c√¢u h·ªèi v√† ƒë√°p √°n
    let questions = [];
    let selectedAnswers = {};
    let timeLeft = 30 * 60; // 30 ph√∫t
    let timerInterval;
    let totalTime = 30 * 60; // 30 ph√∫t, l∆∞u l·∫°i ƒë·ªÉ t√≠nh th·ªùi gian l√†m b√†i

    // H√†m ƒë·ªçc file CSV
    async function readCSVFile(file) {
        return new Promise((resolve, reject) => {
            Papa.parse(file, {
                download: true,
                header: true,
                complete: function(results) {
                    resolve(results.data);
                },
                error: function(error) {
                    reject(error);
                }
            });
        });
    }

    // H√†m ch·ªçn ng·∫´u nhi√™n c√¢u h·ªèi
    function getRandomQuestions(questions, count) {
        const shuffled = [...questions].sort(() => 0.5 - Math.random());
        return shuffled.slice(0, count);
    }

    // H√†m ƒë·ªãnh d·∫°ng l·∫°i c√¢u h·ªèi v√† ƒë√°p √°n t·ª´ 1 chu·ªói (copy t·ª´ tracnghiem.js)
    function formatQuestionText(raw) {
        // Chu·∫©n h√≥a xu·ªëng d√≤ng th√†nh 1 d√≤ng
        let text = raw.replace(/\r\n|\r|\n/g, ' ');

        // T√¨m v·ªã tr√≠ b·∫Øt ƒë·∫ßu ƒë√°p √°n a.
        let match = text.match(/([aA][\.|\)]\s)/);
        if (!match) return text.trim();

        let idx = text.indexOf(match[0]);
        let question = text.slice(0, idx).trim();
        let answers = text.slice(idx);

        // T√°ch ƒë√°p √°n, ch·ªâ l·∫•y ƒë√∫ng 4 ƒë√°p √°n a, b, c, d (kh√¥ng l·∫∑p, kh√¥ng tr√πng)
        let answerArr = [];
        let usedLabels = {};
        let regex = /([a-dA-D][\.|\)])\s(.*?)(?= [a-dA-D][\.|\)]|$)/g;
        let m;
        while ((m = regex.exec(answers)) !== null) {
            let label = m[1].toLowerCase();
            if (!usedLabels[label] && answerArr.length < 4) {
                answerArr.push(`<b>${m[1].toLowerCase()}</b> ${m[2].trim()}`);
                usedLabels[label] = true;
            }
        }

        // N·∫øu kh√¥ng ƒë·ªß 4 ƒë√°p √°n, fallback v·ªÅ t√°ch c≈©
        if (answerArr.length < 4) {
            return text.replace(/([a-d]\.)/gi, '<br><b>$1</b>').replace(/^<br>/, '').trim();
        }

        return `<div style="margin-bottom:10px;">${question}</div>` + answerArr.map(a => `<div style="margin-bottom:4px;">${a}</div>`).join('');
    }

    // H√†m t·∫°o c√¢u h·ªèi
    function createQuestionElement(question, index) {
        const questionCard = document.createElement('div');
        questionCard.className = 'question-card';
        questionCard.innerHTML = `
            <div class="question-header">
                <div class="question-number">C√¢u ${index + 1}</div>
                <div class="question-type">${question.type === 'law' ? 'Ph√°p lu·∫≠t' : 'Chuy√™n m√¥n'}</div>
            </div>
            <div class="question-text">${formatQuestionText(question.question)}</div>
            <div class="options-grid">
                <div class="option-item" data-option="A">
                    <div class="option-label">A</div>
                    <div class="option-desc">L·ª±a ch·ªçn A</div>
                </div>
                <div class="option-item" data-option="B">
                    <div class="option-label">B</div>
                    <div class="option-desc">L·ª±a ch·ªçn B</div>
                </div>
                <div class="option-item" data-option="C">
                    <div class="option-label">C</div>
                    <div class="option-desc">L·ª±a ch·ªçn C</div>
                </div>
                <div class="option-item" data-option="D">
                    <div class="option-label">D</div>
                    <div class="option-desc">L·ª±a ch·ªçn D</div>
                </div>
            </div>
        `;

        // X·ª≠ l√Ω s·ª± ki·ªán ch·ªçn ƒë√°p √°n
        const optionItems = questionCard.querySelectorAll('.option-item');
        optionItems.forEach(item => {
            item.addEventListener('click', () => {
                optionItems.forEach(opt => opt.classList.remove('selected'));
                item.classList.add('selected');
                selectedAnswers[index] = item.dataset.option;
            });
        });

        return questionCard;
    }

    // H√†m c·∫≠p nh·∫≠t ƒë·ªìng h·ªì
    function updateTimer() {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        timerValue.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        if (timeLeft <= 0) {
            clearInterval(timerInterval);
            submitExam();
        }
        timeLeft--;
    }

    // H√†m n·ªôp b√†i
    function submitExam() {
        clearInterval(timerInterval);
        
        // T√≠nh ƒëi·ªÉm
        let lawScore = 0;
        let specializedScore = 0;
        
        questions.forEach((question, index) => {
            const selectedAnswer = selectedAnswers[index];
            if (selectedAnswer === question.answer) {
                if (question.type === 'law') {
                    lawScore++;
                } else {
                    specializedScore++;
                }
            }
        });

        const totalScore = lawScore + specializedScore;

        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        document.getElementById('totalScore').textContent = `${totalScore}/30`;
        document.getElementById('lawScore').textContent = `${lawScore}/10`;
        document.getElementById('specializedScore').textContent = `${specializedScore}/20`;

        // Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng/sai
        questions.forEach((question, index) => {
            const questionCard = questionsContainer.children[index];
            const optionItems = questionCard.querySelectorAll('.option-item');
            
            optionItems.forEach(item => {
                const option = item.dataset.option;
                if (option === question.answer) {
                    item.classList.add('correct');
                } else if (option === selectedAnswers[index] && option !== question.answer) {
                    item.classList.add('incorrect');
                }
            });
        });

        // Hi·ªÉn th·ªã ph·∫ßn k·∫øt qu·∫£
        examSection.style.display = 'none';
        resultSection.style.display = 'block';

        // Th√™m n√∫t xem l·∫°i b√†i l√†m n·∫øu ch∆∞a c√≥
        if (!document.getElementById('reviewButton')) {
            const reviewBtn = document.createElement('button');
            reviewBtn.className = 'btn-phongthi';
            reviewBtn.id = 'reviewButton';
            reviewBtn.textContent = 'Xem l·∫°i b√†i l√†m';
            reviewBtn.onclick = function() {
                showReview();
            };
            document.querySelector('.result-actions').appendChild(reviewBtn);
        }

        // T√≠nh th·ªùi gian l√†m b√†i
        const timeUsedSec = totalTime - timeLeft - 1;
        const min = Math.floor(timeUsedSec / 60);
        const sec = timeUsedSec % 60;
        document.getElementById('timeUsed').textContent = `${min} ph√∫t ${sec.toString().padStart(2, '0')} gi√¢y`;
    }

    // H√†m hi·ªÉn th·ªã l·∫°i b√†i l√†m
    function showReview() {
        resultSection.style.display = 'none';
        examSection.style.display = 'block';
        // Render l·∫°i c√°c c√¢u h·ªèi v·ªõi tr·∫°ng th√°i ƒë√°p √°n ƒë√£ ch·ªçn
        questions.forEach((question, index) => {
            const questionCard = questionsContainer.children[index];
            const optionItems = questionCard.querySelectorAll('.option-item');
            optionItems.forEach(item => {
                item.classList.remove('selected', 'correct', 'incorrect', 'correct-full', 'incorrect-full');
                const option = (item.dataset.option || '').trim().toUpperCase();
                const answer = (question.answer || '').trim().toUpperCase();
                const selected = (selectedAnswers[index] || '').trim().toUpperCase();
                // Lu√¥n t√¥ xanh l√° ƒë√°p √°n ƒë√∫ng
                if (option === answer) {
                    item.classList.add('correct-full');
                }
                // N·∫øu ch·ªçn sai th√¨ t√¥ ƒë·ªè ƒë√°p √°n ƒë√£ ch·ªçn
                if (selected !== answer && option === selected) {
                    item.classList.add('incorrect-full');
                }
            });
        });
        // ·∫®n n√∫t n·ªôp b√†i khi xem l·∫°i
        submitButton.style.display = 'none';
        // Th√™m n√∫t quay v·ªÅ t·ªïng k·∫øt n·∫øu ch∆∞a c√≥
        if (!document.getElementById('backToResultBtn')) {
            const wrapper = document.createElement('div');
            wrapper.style.display = 'flex';
            wrapper.style.justifyContent = 'center';
            wrapper.style.marginTop = '32px';
            const backBtn = document.createElement('button');
            backBtn.className = 'btn-phongthi';
            backBtn.id = 'backToResultBtn';
            backBtn.textContent = 'Quay v·ªÅ trang t·ªïng k·∫øt';
            backBtn.onclick = function() {
                examSection.style.display = 'none';
                resultSection.style.display = 'block';
                submitButton.style.display = '';
                // X√≥a n√∫t khi quay l·∫°i
                if (wrapper.parentNode) wrapper.parentNode.removeChild(wrapper);
            };
            wrapper.appendChild(backBtn);
            examSection.appendChild(wrapper);
        }
        // Cu·ªôn l√™n ƒë·∫ßu
        window.scrollTo({top: 0, behavior: 'smooth'});
    }

    // X·ª≠ l√Ω s·ª± ki·ªán khi click v√†o n√∫t b·∫Øt ƒë·∫ßu thi
    startButton.addEventListener('click', async function() {
        if (!startButton.classList.contains('enabled')) return;

        const subjectId = startButton.dataset.subjectId;
        const subject = subjects.find(s => s.id === subjectId);

        try {
            // ƒê·ªçc c√¢u h·ªèi ph√°p lu·∫≠t
            let lawQuestions = [];
            for (const file of subject.files.law) {
                const data = await readCSVFile(file);
                lawQuestions = lawQuestions.concat(data);
            }
            lawQuestions = getRandomQuestions(lawQuestions, 10);

            // ƒê·ªçc c√¢u h·ªèi chuy√™n m√¥n
            const specializedData = await readCSVFile(subject.files.specialized[0]);
            const specializedQuestions = getRandomQuestions(specializedData, 20);

            // G·ªôp c√¢u h·ªèi
            questions = [
                ...lawQuestions.map(q => ({ ...q, type: 'law' })),
                ...specializedQuestions.map(q => ({ ...q, type: 'specialized' }))
            ];

            // T·∫°o giao di·ªán c√¢u h·ªèi
            questionsContainer.innerHTML = '';
            questions.forEach((question, index) => {
                const questionElement = createQuestionElement(question, index);
                questionsContainer.appendChild(questionElement);
            });

            // Hi·ªÉn th·ªã ph·∫ßn thi
            selectionSection.style.display = 'none';
            examSection.style.display = 'block';

            // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c
            timeLeft = 30 * 60;
            updateTimer();
            timerInterval = setInterval(updateTimer, 1000);

        } catch (error) {
            console.error('L·ªói khi t·∫£i c√¢u h·ªèi:', error);
            alert('C√≥ l·ªói x·∫£y ra khi t·∫£i c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    });

    // X·ª≠ l√Ω s·ª± ki·ªán khi click v√†o n√∫t n·ªôp b√†i
    submitButton.addEventListener('click', submitExam);
}); 