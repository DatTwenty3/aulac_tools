// phongthi.js - X·ª≠ l√Ω logic thi tr·ª±c tuy·∫øn
import subjectsConfig from './subjects_config.js';

document.addEventListener('DOMContentLoaded', function() {
    const selectStyled = document.getElementById('selectStyled');
    const selectOptions = document.getElementById('selectOptions');
    const startButton = document.getElementById('startButton');
    const selectPlaceholder = selectStyled.querySelector('.select-placeholder');
    const selectionSection = document.getElementById('selectionSection');
    const examSection = document.getElementById('examSection');
    const resultSection = document.getElementById('resultSection');
    const questionsContainer = document.getElementById('questionsContainer');
    const timerValue = document.getElementById('timerValue');
    const submitButton = document.getElementById('submitButton');

    // Danh s√°ch c√°c m√¥n thi
    const subjects = subjectsConfig.map(subject => ({
        id: subject.id,
        title: subject.title,
        subtitle: subject.subtitle,
        icon: subject.icon,
        files: {
            law: subject.files.law.map(file => `data/${file}`),
            specialized: subject.files.specialized.map(file => `data/${file}`)
        }
    }));

    // T·∫°o danh s√°ch ch·ªçn m√¥n thi
    subjects.forEach(subject => {
        const option = document.createElement('div');
        option.className = 'select-option';
        option.innerHTML = `
            <div style="display: flex; align-items: center; gap: 12px;">
                <span class="option-icon" style="font-size: 2em; display: flex; align-items: center;">${subject.icon || 'üìö'}</span>
                <div style="display: flex; flex-direction: column;">
                    <span style="font-weight: 600; color: #222;">${subject.title}</span>
                    <span style="font-size: 0.98em; color: #888; font-style: italic;">${subject.subtitle}</span>
                </div>
            </div>
        `;
        option.addEventListener('click', () => {
            // Hi·ªÉn th·ªã icon, t√™n m√¥n thi v√† subtitle ƒë·∫πp h∆°n trong √¥ ch·ªçn, cƒÉn tr√°i, kh√¥ng in nghi√™ng
            selectPlaceholder.innerHTML = `
                <div style="display: flex; align-items: flex-start; gap: 12px;">
                    <span class="option-icon" style="font-size: 2em; display: flex; align-items: flex-start; font-style: normal;">${subject.icon || 'üìö'}</span>
                    <div style="display: flex; flex-direction: column;">
                        <span style="font-weight: 600; color: #222; font-style: normal;">${subject.title}</span>
                        <span style="font-size: 0.98em; color: #888; font-style: normal;">${subject.subtitle}</span>
                    </div>
                </div>
            `;
            selectStyled.classList.remove('active');
            selectOptions.classList.remove('show');
            startButton.classList.add('enabled');
            startButton.dataset.subjectId = subject.id;
        });
        selectOptions.appendChild(option);
    });

    // X·ª≠ l√Ω s·ª± ki·ªán khi click v√†o select-styled
    selectStyled.addEventListener('click', function() {
        selectStyled.classList.toggle('active');
        selectOptions.classList.toggle('show');
    });

    // Bi·∫øn l∆∞u tr·ªØ c√¢u h·ªèi v√† ƒë√°p √°n
    let questions = [];
    let selectedAnswers = {};
    let timeLeft = 30 * 60; // 30 ph√∫t
    let timerInterval;
    let totalTime = 30 * 60; // 30 ph√∫t, l∆∞u l·∫°i ƒë·ªÉ t√≠nh th·ªùi gian l√†m b√†i

    // H√†m ƒë·ªçc file CSV
    async function readCSVFile(file) {
        return new Promise((resolve, reject) => {
            Papa.parse(file, {
                download: true,
                header: true,
                skipEmptyLines: true,
                transformHeader: header => header.trim(),
                transform: value => value.trim(),
                complete: function(results) {
                    if (results.errors && results.errors.length > 0) {
                        console.error('CSV parsing errors:', results.errors);
                        reject(new Error('L·ªói khi ƒë·ªçc file CSV: ' + results.errors[0].message));
                        return;
                    }
                    // G·∫Øn subLabel d·ª±a v√†o t√™n file
                    let subLabel = '';
                    if (file.includes('PLR')) subLabel = 'Ph√°p lu·∫≠t ri√™ng';
                    else if (file.includes('PLC')) subLabel = 'Ph√°p lu·∫≠t chung';
                    else if (file.includes('CM')) subLabel = 'Chuy√™n m√¥n';
                    else subLabel = '';
                    const validData = results.data.filter(row => {
                        return row.stt && row.question && row.answer;
                    }).map(row => ({...row, subLabel}));
                    if (validData.length === 0) {
                        reject(new Error('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu h·ª£p l·ªá trong file CSV'));
                        return;
                    }
                    resolve(validData);
                },
                error: function(error) {
                    console.error('CSV download error:', error);
                    reject(new Error('Kh√¥ng th·ªÉ t·∫£i file CSV: ' + error.message));
                }
            });
        });
    }

    // H√†m t·∫£i d·ªØ li·ªáu c√¢u h·ªèi
    async function loadQuestions(subjectId) {
        try {
            const subject = subjects.find(s => s.id === subjectId);
            if (!subject) {
                throw new Error('Kh√¥ng t√¨m th·∫•y m√¥n thi');
            }

            let allQuestions = [];
            
            // T·∫£i c√¢u h·ªèi ph√°p lu·∫≠t
            for (const file of subject.files.law) {
                try {
                    const questions = await readCSVFile(file);
                    questions.forEach(q => q.type = 'law');
                    allQuestions = allQuestions.concat(questions);
                } catch (error) {
                    console.error(`L·ªói khi t·∫£i file ${file}:`, error);
                    throw new Error(`Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi ph√°p lu·∫≠t: ${error.message}`);
                }
            }

            // T·∫£i c√¢u h·ªèi chuy√™n m√¥n
            for (const file of subject.files.specialized) {
                try {
                    const questions = await readCSVFile(file);
                    questions.forEach(q => q.type = 'specialized');
                    allQuestions = allQuestions.concat(questions);
                } catch (error) {
                    console.error(`L·ªói khi t·∫£i file ${file}:`, error);
                    throw new Error(`Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi chuy√™n m√¥n: ${error.message}`);
                }
            }

            if (allQuestions.length === 0) {
                throw new Error('Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o');
            }

            return allQuestions;
        } catch (error) {
            console.error('L·ªói khi t·∫£i c√¢u h·ªèi:', error);
            throw error;
        }
    }

    // H√†m ch·ªçn ng·∫´u nhi√™n c√¢u h·ªèi
    function getRandomQuestions(questions, count) {
        const shuffled = [...questions].sort(() => 0.5 - Math.random());
        return shuffled.slice(0, count);
    }

    // H√†m ƒë·ªãnh d·∫°ng l·∫°i c√¢u h·ªèi v√† ƒë√°p √°n t·ª´ 1 chu·ªói (copy t·ª´ tracnghiem.js)
    function parseQuestionAndAnswers(raw) {
        if (!raw || typeof raw !== 'string') {
            console.error('Invalid question text:', raw);
            return { question: 'C√¢u h·ªèi kh√¥ng h·ª£p l·ªá', answers: [] };
        }
        // Chu·∫©n h√≥a xu·ªëng d√≤ng th√†nh \n ƒë·ªÉ nh·∫≠n di·ªán ƒë√°p √°n nhi·ªÅu d√≤ng
        let text = raw.replace(/\r\n|\r/g, '\n');
        if (!text) {
            console.error('Empty question text');
            return { question: 'C√¢u h·ªèi kh√¥ng h·ª£p l·ªá', answers: [] };
        }
        // T√¨m v·ªã tr√≠ b·∫Øt ƒë·∫ßu ƒë√°p √°n a.
        let match = text.match(/([aA][\.|\)])\s?/);
        if (!match) {
            console.warn('No answer options found in:', text);
            return { question: text, answers: [] };
        }
        let idx = text.indexOf(match[0]);
        let question = text.slice(0, idx).trim();
        let answers = text.slice(idx);
        // Regex 1: nh·∫≠n di·ªán ƒë√°p √°n ·ªü ƒë·∫ßu d√≤ng ho·∫∑c sau d·∫•u xu·ªëng d√≤ng
        let answerArr = [];
        let usedLabels = {};
        let regex1 = /(^|\n)([a-dA-D][\.|\)])\s*((?:.|\n)*?)(?=(?:\n[a-dA-D][\.|\)])|$)/g;
        let m;
        while ((m = regex1.exec(answers)) !== null) {
            let label = m[2].toUpperCase();
            if (!usedLabels[label] && answerArr.length < 4) {
                answerArr.push(m[3].trim().replace(/\s+/g, ' '));
                usedLabels[label] = true;
            }
        }
        // N·∫øu kh√¥ng ƒë·ªß 4 ƒë√°p √°n, th·ª≠ l·∫°i v·ªõi regex t√°ch li·ªÅn nhau tr√™n m·ªôt d√≤ng
        if (answerArr.length < 4) {
            answerArr = [];
            usedLabels = {};
            let regex2 = /([a-dA-D][\.|\)])\s*([^a-dA-D]*)/g;
            let m2;
            while ((m2 = regex2.exec(answers)) !== null && answerArr.length < 4) {
                let label = m2[1].toUpperCase();
                if (!usedLabels[label]) {
                    let value = m2[2].replace(/\s+/g, ' ').trim();
                    // Lo·∫°i b·ªè nh√£n ƒë√°p √°n ti·∫øp theo n·∫øu b·ªã d√≠nh v√†o
                    value = value.replace(/([a-dA-D][\.|\)]).*/, '').trim();
                    answerArr.push(value);
                    usedLabels[label] = true;
                }
            }
        }
        if (answerArr.length < 4) {
            return { question: text, answers: [] };
        }
        return { question, answers: answerArr };
    }

    // H√†m t·∫°o c√¢u h·ªèi
    function createQuestionElement(question, index) {
        const questionCard = document.createElement('div');
        questionCard.className = 'question-card';
        // Ph√¢n t√≠ch c√¢u h·ªèi v√† ƒë√°p √°n
        const parsed = parseQuestionAndAnswers(question.question);
        // L·∫•y subLabel t·ª´ d·ªØ li·ªáu c√¢u h·ªèi
        let subLabel = question.subLabel || (question.type === 'law' ? 'Ph√°p lu·∫≠t' : (question.type === 'specialized' ? 'Chuy√™n m√¥n' : ''));
        let stt = question.stt || (index + 1);
        // Hi·ªÉn th·ªã ngu·ªìn g·ªëc ·ªü g√≥c ph·∫£i tr√™n
        questionCard.innerHTML = `
            <div class="question-header">
                <div class="question-number">C√¢u ${index + 1}</div>
                <div class="question-type" style="font-size:0.98em; color:#888; font-style:italic;">ƒê∆∞·ª£c l·∫•y t·ª´ c√¢u ${stt} - ${subLabel}</div>
            </div>
            <div class="question-text">${parsed.question.replace(/\s+/g, ' ').trim()}</div>
            <div class="options-grid">
                <div class="option-item" data-option="A">
                    <div class="option-label">A</div>
                    <div class="option-desc">${parsed.answers[0] ? parsed.answers[0] : ''}</div>
                </div>
                <div class="option-item" data-option="B">
                    <div class="option-label">B</div>
                    <div class="option-desc">${parsed.answers[1] ? parsed.answers[1] : ''}</div>
                </div>
                <div class="option-item" data-option="C">
                    <div class="option-label">C</div>
                    <div class="option-desc">${parsed.answers[2] ? parsed.answers[2] : ''}</div>
                </div>
                <div class="option-item" data-option="D">
                    <div class="option-label">D</div>
                    <div class="option-desc">${parsed.answers[3] ? parsed.answers[3] : ''}</div>
                </div>
            </div>
        `;
        // X·ª≠ l√Ω s·ª± ki·ªán ch·ªçn ƒë√°p √°n
        const optionItems = questionCard.querySelectorAll('.option-item');
        optionItems.forEach(item => {
            item.addEventListener('click', () => {
                optionItems.forEach(opt => opt.classList.remove('selected'));
                item.classList.add('selected');
                selectedAnswers[index] = item.dataset.option;
            });
        });
        return questionCard;
    }

    // H√†m c·∫≠p nh·∫≠t ƒë·ªìng h·ªì
    function updateTimer() {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        // C·∫≠p nh·∫≠t ·ªü thanh c√¥ng c·ª• ch√≠nh
        timerValue.textContent = timeString;

        // C·∫≠p nh·∫≠t ·ªü n√∫t cu·ªôn l√™n ƒë·∫ßu trang
        const scrollToTopTimer = document.getElementById('scrollToTopTimer');
        if (scrollToTopTimer) {
            scrollToTopTimer.textContent = timeString;
        }
        
        if (timeLeft <= 0) {
            clearInterval(timerInterval);
            submitExam();
        }
        timeLeft--;
    }

    // H√†m n·ªôp b√†i
    async function submitExam() {
        clearInterval(timerInterval);
        
        // T√≠nh ƒëi·ªÉm
        let lawScore = 0;
        let specializedScore = 0;
        let totalQuestions = questions.length;
        let lawQuestions = questions.filter(q => q.type === 'law').length;
        let specializedQuestions = questions.filter(q => q.type === 'specialized').length;
        
        questions.forEach((question, index) => {
            const selectedAnswer = selectedAnswers[index];
            if (selectedAnswer && question.answer && selectedAnswer.toUpperCase() === question.answer.toUpperCase()) {
                if (question.type === 'law') {
                    lawScore++;
                } else if (question.type === 'specialized') {
                    specializedScore++;
                }
            }
        });

        // T√≠nh ƒëi·ªÉm theo t·ª∑ l·ªá
        const lawPercentage = lawQuestions > 0 ? (lawScore / lawQuestions) * 10 : 0;
        const specializedPercentage = specializedQuestions > 0 ? (specializedScore / specializedQuestions) * 20 : 0;
        const totalScore = Math.round(lawPercentage + specializedPercentage);

        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë·∫°t/kh√¥ng ƒë·∫°t
        const isPassed = lawScore >= 7 && totalScore >= 21;

        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        document.getElementById('totalScore').textContent = `${totalScore}/30`;
        document.getElementById('lawScore').textContent = `${lawScore}/${lawQuestions}`;
        document.getElementById('specializedScore').textContent = `${specializedScore}/${specializedQuestions}`;

        // Th√™m th√¥ng b√°o k·∫øt qu·∫£
        const resultHeader = document.querySelector('.result-header');
        resultHeader.innerHTML = `
            <h2>K·∫øt qu·∫£ b√†i thi</h2>
            <div class="result-message ${isPassed ? 'passed' : 'failed'}">
                ${isPassed ? 
                    '<div class="message-icon">üéâ</div>' : 
                    '<div class="message-icon">üòî</div>'
                }
                <div class="message-text">
                    ${isPassed ? 
                        'Ch√∫c m·ª´ng b·∫°n ƒë√£ ƒë·∫°t y√™u c·∫ßu!' : 
                        'R·∫•t ti·∫øc, b·∫°n ch∆∞a ƒë·∫°t y√™u c·∫ßu.'
                    }
                </div>
                <div class="message-detail">
                    ${isPassed ? 
                        'B·∫°n ƒë√£ ho√†n th√†nh xu·∫•t s·∫Øc b√†i thi.' : 
                        'B·∫°n c·∫ßn ƒë·∫°t t·ªëi thi·ªÉu 7 ƒëi·ªÉm ph·∫ßn Ph√°p lu·∫≠t v√† t·ªïng ƒëi·ªÉm t·ª´ 21 ƒëi·ªÉm tr·ªü l√™n.'
                    }
                </div>
            </div>
        `;

        // Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng/sai
        questions.forEach((question, index) => {
            const questionCard = questionsContainer.children[index];
            if (!questionCard) return;
            
            const optionItems = questionCard.querySelectorAll('.option-item');
            const selectedAnswer = selectedAnswers[index];
            
            optionItems.forEach(item => {
                const option = item.dataset.option;
                if (option && question.answer && option.toUpperCase() === question.answer.toUpperCase()) {
                    item.classList.add('correct');
                } else if (selectedAnswer && option === selectedAnswer && option !== question.answer) {
                    item.classList.add('incorrect');
                }
            });
        });

        // Hi·ªÉn th·ªã ph·∫ßn k·∫øt qu·∫£
        examSection.style.display = 'none';
        resultSection.style.display = 'block';

        // Th√™m n√∫t xem l·∫°i b√†i l√†m n·∫øu ch∆∞a c√≥
        if (!document.getElementById('reviewButton')) {
            const reviewBtn = document.createElement('button');
            reviewBtn.className = 'btn-phongthi';
            reviewBtn.id = 'reviewButton';
            reviewBtn.textContent = 'Xem l·∫°i b√†i l√†m';
            reviewBtn.onclick = function() {
                showReview();
            };
            document.querySelector('.result-actions').appendChild(reviewBtn);
        }

        // T√≠nh th·ªùi gian l√†m b√†i
        const timeUsedSec = totalTime - timeLeft - 1;
        const min = Math.floor(timeUsedSec / 60);
        const sec = timeUsedSec % 60;
        document.getElementById('timeUsed').textContent = `${min.toString().padStart(2, '0')}:${sec.toString().padStart(2, '0')}`;

        // K√≠ch ho·∫°t n√∫t sau khi b√†i thi hi·ªÉn th·ªã
        toggleScrollToTopButton(true);
    }

    // H√†m hi·ªÉn th·ªã l·∫°i b√†i l√†m
    function showReview() {
        resultSection.style.display = 'none';
        examSection.style.display = 'block';
        // Render l·∫°i c√°c c√¢u h·ªèi v·ªõi tr·∫°ng th√°i ƒë√°p √°n ƒë√£ ch·ªçn
        questions.forEach((question, index) => {
            const questionCard = questionsContainer.children[index];
            if (!questionCard) return;

            const optionItems = questionCard.querySelectorAll('.option-item');
            const selected = (selectedAnswers[index] || '').trim().toUpperCase();
            const answer = (question.answer || '').trim().toUpperCase();

            optionItems.forEach(item => {
                // Reset c√°c class c≈©
                item.classList.remove('selected', 'correct', 'incorrect', 'correct-full', 'incorrect-full', 'user-selected-answer');
                
                const option = (item.dataset.option || '').trim().toUpperCase();
                
                // Lu√¥n t√¥ xanh l√° ƒë√°p √°n ƒë√∫ng
                if (option === answer) {
                    item.classList.add('correct-full');
                }
                
                // N·∫øu ch·ªçn sai th√¨ t√¥ ƒë·ªè ƒë√°p √°n ƒë√£ ch·ªçn
                if (selected && selected !== answer && option === selected) {
                    item.classList.add('incorrect-full');
                }
                
                // Th√™m class animation cho ƒë√°p √°n ng∆∞·ªùi d√πng ƒë√£ ch·ªçn (d√π ƒë√∫ng hay sai)
                if (selected && option === selected) {
                    item.classList.add('user-selected-answer');
                }
            });
        });
        // ·∫®n n√∫t n·ªôp b√†i khi xem l·∫°i
        submitButton.style.display = 'none';
        // Th√™m n√∫t quay v·ªÅ t·ªïng k·∫øt n·∫øu ch∆∞a c√≥
        if (!document.getElementById('backToResultBtn')) {
            const wrapper = document.createElement('div');
            wrapper.style.display = 'flex';
            wrapper.style.justifyContent = 'center';
            wrapper.style.marginTop = '32px';
            const backBtn = document.createElement('button');
            backBtn.className = 'btn-phongthi';
            backBtn.id = 'backToResultBtn';
            backBtn.textContent = 'Quay v·ªÅ trang t·ªïng k·∫øt';
            backBtn.onclick = function() {
                examSection.style.display = 'none';
                resultSection.style.display = 'block';
                submitButton.style.display = '';
                // X√≥a n√∫t khi quay l·∫°i
                if (wrapper.parentNode) wrapper.parentNode.removeChild(wrapper);
            };
            wrapper.appendChild(backBtn);
            examSection.appendChild(wrapper);
        }
        // Cu·ªôn l√™n ƒë·∫ßu
        window.scrollTo({top: 0, behavior: 'smooth'});

        // K√≠ch ho·∫°t n√∫t sau khi xem review
        toggleScrollToTopButton(true);
    }

    // H√†m ch·ªçn ng·∫´u nhi√™n c√¢u h·ªèi Ph√°p lu·∫≠t chung v√† ri√™ng, ƒë·∫£m b·∫£o m·ªói lo·∫°i c√≥ √≠t nh·∫•t 1 c√¢u
    function getRandomLawQuestions(lawQuestions) {
        // T√°ch ri√™ng PLC v√† PLR
        const lawChung = lawQuestions.filter(q => (q.subLabel || '').includes('Ph√°p lu·∫≠t chung'));
        const lawRieng = lawQuestions.filter(q => (q.subLabel || '').includes('Ph√°p lu·∫≠t ri√™ng'));
        // N·∫øu ch·ªâ c√≥ 1 nh√≥m, l·∫•y ƒë·ªß 10 c√¢u t·ª´ nh√≥m ƒë√≥
        if (lawChung.length === 0) {
            return getRandomQuestions(lawRieng, 10);
        }
        if (lawRieng.length === 0) {
            return getRandomQuestions(lawChung, 10);
        }
        // ƒê·∫£m b·∫£o m·ªói nh√≥m c√≥ √≠t nh·∫•t 1 c√¢u
        const selected = [];
        // L·∫•y 1 c√¢u ng·∫´u nhi√™n t·ª´ m·ªói nh√≥m
        selected.push(getRandomQuestions(lawChung, 1)[0]);
        selected.push(getRandomQuestions(lawRieng, 1)[0]);
        // S·ªë c√≤n l·∫°i l√† 8 c√¢u, chia ng·∫´u nhi√™n cho 2 nh√≥m
        const remainingChung = lawChung.filter(q => q !== selected[0]);
        const remainingRieng = lawRieng.filter(q => q !== selected[1]);
        // G·ªôp l·∫°i v√† x√°o tr·ªôn
        const remaining = [...remainingChung, ...remainingRieng];
        const more = getRandomQuestions(remaining, 8);
        return getRandomQuestions([...selected, ...more], 10); // X√°o tr·ªôn l·∫°i l·∫ßn n·ªØa cho ƒë·ªÅu
    }

    // C·∫≠p nh·∫≠t x·ª≠ l√Ω s·ª± ki·ªán n√∫t b·∫Øt ƒë·∫ßu
    startButton.addEventListener('click', async function() {
        const subjectId = this.dataset.subjectId;
        if (!subjectId) {
            alert('Vui l√≤ng ch·ªçn m√¥n thi');
            return;
        }

        try {
            // Hi·ªÉn th·ªã loading
            startButton.disabled = true;
            startButton.textContent = 'ƒêang t·∫£i...';

            // T·∫£i c√¢u h·ªèi
            questions = await loadQuestions(subjectId);
            
            // Ch·ªçn ng·∫´u nhi√™n c√¢u h·ªèi
            const lawQuestions = questions.filter(q => q.type === 'law');
            const specializedQuestions = questions.filter(q => q.type === 'specialized');
            
            // S·ª¨A ƒêO·∫†N N√ÄY: ch·ªçn 10 c√¢u ph√°p lu·∫≠t theo t·ª∑ l·ªá ng·∫´u nhi√™n nh∆∞ng ph·∫£i c√≥ √≠t nh·∫•t 1 c√¢u PLC v√† 1 c√¢u PLR
            const selectedLawQuestions = getRandomLawQuestions(lawQuestions);
            const selectedSpecializedQuestions = getRandomQuestions(specializedQuestions, 20);

            questions = [...selectedLawQuestions, ...selectedSpecializedQuestions];

            // T·∫°o giao di·ªán c√¢u h·ªèi
            questionsContainer.innerHTML = '';
            questions.forEach((question, index) => {
                const questionElement = createQuestionElement(question, index);
                questionsContainer.appendChild(questionElement);
            });

            // Hi·ªÉn th·ªã ph·∫ßn thi
            selectionSection.style.display = 'none';
            examSection.style.display = 'block';

            // B·∫Øt ƒë·∫ßu ƒë·∫øm th·ªùi gian
            timeLeft = 30 * 60;
            totalTime = timeLeft;
            updateTimer();
            timerInterval = setInterval(updateTimer, 1000);

        } catch (error) {
            alert('C√≥ l·ªói x·∫£y ra: ' + error.message);
            console.error('L·ªói khi b·∫Øt ƒë·∫ßu thi:', error);
        } finally {
            // Reset tr·∫°ng th√°i n√∫t
            startButton.disabled = false;
            startButton.textContent = 'B·∫Øt ƒë·∫ßu thi';
        }

        // K√≠ch ho·∫°t n√∫t sau khi b√†i thi hi·ªÉn th·ªã
        toggleScrollToTopButton(true);
    });

    // X·ª≠ l√Ω s·ª± ki·ªán khi click v√†o n√∫t n·ªôp b√†i
    submitButton.addEventListener('click', submitExam);

    // --- Logic cho n√∫t cu·ªôn l√™n ƒë·∫ßu trang ---
    const scrollToTopBtn = document.getElementById('scrollToTopBtn');
    if (scrollToTopBtn) {
        // M·∫∑c ƒë·ªãnh ·∫©n n√∫t ƒëi
        scrollToTopBtn.style.display = 'none';

        // Logic ·∫©n/hi·ªán n√∫t d·ª±a tr√™n scroll v√† ch·ªâ khi ƒëang ·ªü m√†n h√¨nh thi
        window.addEventListener('scroll', () => {
            // ƒêi·ªÅu ki·ªán 1: Ph·∫£i ·ªü m√†n h√¨nh thi
            const isExamVisible = examSection.style.display === 'block';
            // ƒêi·ªÅu ki·ªán 2: Ph·∫£i cu·ªôn ƒë·ªß xa
            const isScrolledDown = document.body.scrollTop > 150 || document.documentElement.scrollTop > 150;
            // ƒêi·ªÅu ki·ªán 3: Kh√¥ng ph·∫£i ƒëang xem l·∫°i (n√∫t N·ªôp b√†i ch√≠nh ph·∫£i ƒëang hi·ªÉn th·ªã)
            const isReviewing = submitButton.style.display === 'none';

            if (isExamVisible && isScrolledDown && !isReviewing) {
                scrollToTopBtn.style.display = 'flex';
            } else {
                scrollToTopBtn.style.display = 'none';
            }
        });

        // Logic click ƒë·ªÉ cu·ªôn l√™n
        scrollToTopBtn.addEventListener('click', () => {
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });
    }
}); 